{"version":3,"sources":["components/countdown/countdown.component.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["countdown","myInterval","seconds","minutes","addTime","subsctractTime","startTimer","stopTimer","resetTimer","className","onClick","App","useState","dynamicSeconds","setDynamicSeconds","dynamicMinutes","setDynamicMinutes","intervalHandler","window","setInterval","setTimeout","clearInterval","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2LAqEeA,IC/DXC,ED+DWD,EAzDf,YAQkC,IAPhCE,EAO+B,EAP/BA,QACAC,EAM+B,EAN/BA,QACAC,EAK+B,EAL/BA,QACAC,EAI+B,EAJ/BA,eACAC,EAG+B,EAH/BA,WACAC,EAE+B,EAF/BA,UACAC,EAC+B,EAD/BA,WAEA,OACE,sBAAKC,UAAU,4DAAf,UACE,qBAAKA,UAAU,oDAAf,SACE,mBAAGA,UAAU,qBAAb,wBAEF,sBAAKA,UAAU,sDAAf,UACE,wBACEA,UAAU,kCACVC,QAASL,EAFX,eAMA,qBAAKI,UAAU,8EAAf,SACE,sBAAKA,UAAU,qBAAf,UACGN,EADH,MACeD,OAGjB,wBAAQO,UAAU,kCAAkCC,QAASN,EAA7D,kBAIF,wBACEK,UAAU,6DACVC,QAASJ,EAFX,SAIE,mBAAGG,UAAU,SAAb,qBAEF,sBAAKA,UAAU,sDAAf,UACE,wBACEA,UAAU,4EACVC,QAASH,EAFX,kBAOA,mBAAGE,UAAU,8CAAb,sBAEA,wBACEA,UAAU,qFACVC,QAASF,EAFX,4BCtDJN,EAAU,EACVC,EAAU,EAiFCQ,MA9Ef,WAAgB,IAAD,EAC+BC,mBAAS,GADxC,mBACNC,EADM,KACUC,EADV,OAE+BF,mBAAS,GAFxC,mBAENG,EAFM,KAEUC,EAFV,KAgBPC,EAAkB,WACtBhB,EAAaiB,OAAOC,aAAY,WAE9BL,EADAZ,GAAoB,GAEJ,IAAZA,GAA6B,IAAZC,IACnBD,EAAU,GACVkB,YAAW,WACO,IAAZjB,IACFA,GAAoB,GAEtBa,EAAkBb,KACjB,QAEJ,MAkCL,OAhBgB,IAAZD,GAA6B,IAAZC,GACnBkB,cAAcpB,GAgBd,qBAAKQ,UAAU,gBAAf,SACE,cAAC,EAAD,CACEP,QAASW,EACTV,QAASY,EACTX,QAhEiB,WAErBY,EADAb,GAAoB,IAgEhBE,eA5DwB,WACZ,IAAZF,GAEFa,EADAb,GAAoB,IA2DlBG,WAtCoB,WACR,IAAZH,GAA6B,IAAZD,IACH,IAAZC,GAA6B,IAAZD,GACnBA,EAAU,GACVe,IACAG,YAAW,WAETJ,EADAb,GAAoB,KAEnB,MAEHc,MA6BAV,UApBmB,WACvBc,cAAcpB,IAoBVO,WAjBoB,WACxBa,cAAcpB,GAEdE,EAAU,EACVW,EAFAZ,EAAU,GAGVc,EAAkBb,SCtDPmB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5f0c0f66.chunk.js","sourcesContent":["import React, { ReactElement } from \"react\";\n\ntype CountdownProps = {\n  seconds: number;\n  minutes: number;\n  addTime: () => void;\n  subsctractTime: () => void;\n  startTimer: () => void;\n  stopTimer: () => void;\n  resetTimer: () => void;\n};\n\nfunction countdown({\n  seconds,\n  minutes,\n  addTime,\n  subsctractTime,\n  startTimer,\n  stopTimer,\n  resetTimer,\n}: CountdownProps): ReactElement {\n  return (\n    <div className=\"flex flex-col h-screen w-full md:m-auto md-h-600 md-w-600\">\n      <div className=\"flex bg-gray-800 text-gray-200 md:hidden h-25-per\">\n        <p className=\"text-center m-auto\">POMODORO</p>\n      </div>\n      <div className=\"flex bg-gray-800 text-gray-200 h-15-per md-h-20-per\">\n        <button\n          className=\"text-center m-auto w-1/3 h-full\"\n          onClick={subsctractTime}\n        >\n          -\n        </button>\n        <div className=\"border-solid border-l-2 border-r-2 border-gray-200 m-auto w-1/3 h-full flex\">\n          <div className=\"text-center m-auto\">\n            {minutes} : {seconds}\n          </div>\n        </div>\n        <button className=\"text-center m-auto w-1/3 h-full\" onClick={addTime}>\n          +\n        </button>\n      </div>\n      <button\n        className=\"flex bg-blue-500 text-gray-800 h-full h-45-per md-h-60-per\"\n        onClick={startTimer}\n      >\n        <p className=\"m-auto\">Start</p>\n      </button>\n      <div className=\"flex bg-gray-800 text-gray-200 h-15-per md-h-20-per\">\n        <button\n          className=\"text-center w-1/2 md:w-1/3 h-full border-solid border-r-2 border-gray-200\"\n          onClick={stopTimer}\n        >\n          Stop\n        </button>\n\n        <p className=\"text-center m-auto hidden md:block md:w-1/3\">POMODORO</p>\n\n        <button\n          className=\"text-center w-1/2 md:w-1/3 h-full md:border-solid md:border-l-2 md:border-gray-200\"\n          onClick={resetTimer}\n        >\n          Restart\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default countdown;\n","import React, { useState } from \"react\";\n\nimport Countdown from \"./components/countdown/countdown.component\";\n\nlet seconds = 0;\nlet minutes = 0;\nlet myInterval: number;\n\nfunction App() {\n  const [dynamicSeconds, setDynamicSeconds] = useState(0);\n  const [dynamicMinutes, setDynamicMinutes] = useState(0);\n\n  const addTimeHandler = () => {\n    minutes = minutes + 5;\n    setDynamicMinutes(minutes);\n  };\n\n  const subsctractTimeHandler = () => {\n    if (minutes !== 0) {\n      minutes = minutes - 5;\n      setDynamicMinutes(minutes);\n    }\n  };\n\n  const intervalHandler = () => {\n    myInterval = window.setInterval(() => {\n      seconds = seconds - 1;\n      setDynamicSeconds(seconds);\n      if (seconds === 0 && minutes !== 0) {\n        seconds = 60;\n        setTimeout(() => {\n          if (minutes !== 0) {\n            minutes = minutes - 1;\n          }\n          setDynamicMinutes(minutes);\n        }, 1000);\n      }\n    }, 1000);\n  };\n\n  const startTimerHandler = () => {\n    if (minutes !== 0 || seconds !== 0) {\n      if (minutes !== 0 && seconds === 0) {\n        seconds = 60;\n        intervalHandler();\n        setTimeout(() => {\n          minutes = minutes - 1;\n          setDynamicMinutes(minutes);\n        }, 1000);\n      } else {\n        intervalHandler();\n      }\n    }\n  };\n\n  if (seconds === 0 && minutes === 0) {\n    clearInterval(myInterval);\n  }\n\n  const stopTimerHandler = () => {\n    clearInterval(myInterval);\n  };\n\n  const resetTimerHandler = () => {\n    clearInterval(myInterval);\n    seconds = 0;\n    minutes = 0;\n    setDynamicSeconds(seconds);\n    setDynamicMinutes(minutes);\n  };\n\n  return (\n    <div className=\"flex h-screen\">\n      <Countdown\n        seconds={dynamicSeconds}\n        minutes={dynamicMinutes}\n        addTime={addTimeHandler}\n        subsctractTime={subsctractTimeHandler}\n        startTimer={startTimerHandler}\n        stopTimer={stopTimerHandler}\n        resetTimer={resetTimerHandler}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./tailwind.output.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}