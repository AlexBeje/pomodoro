{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["myInterval","seconds","minutes","App","useState","dynamicSeconds","setDynamicSeconds","dynamicMinutes","setDynamicMinutes","intervalHandler","window","setInterval","setTimeout","clearInterval","className","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0JAKIA,E,sDAFAC,G,MAAU,GACVC,EAAU,EAwGCC,MArGf,WAAgB,IAAD,EAC+BC,mBAAS,GADxC,mBACNC,EADM,KACUC,EADV,OAE+BF,mBAAS,GAFxC,mBAENG,EAFM,KAEUC,EAFV,KAgBPC,EAAkB,WACtBT,EAAaU,OAAOC,aAAY,WAE9BL,EADAL,GAAoB,GAEJ,IAAZA,GAA6B,IAAZC,IACnBD,EAAU,GACVW,YAAW,WACO,IAAZV,IACFA,GAAoB,GAEtBM,EAAkBN,KACjB,QAEJ,MAkCL,OAhBgB,IAAZD,GAA6B,IAAZC,GACnBW,cAAcb,GAgBd,qBAAKc,UAAU,MAAf,SAIE,sBAAKA,UAAU,gBAAf,UACE,sBAAKA,UAAU,gCAAf,UACE,wBACEA,UAAU,uBACVC,QA/DoB,WACZ,IAAZb,GAEFM,EADAN,GAAoB,IA2DhB,eAMA,oBAAGY,UAAU,MAAb,oBACUP,EADV,MAC6BF,KAE7B,wBAAQS,UAAU,uBAAuBC,QA3E1B,WAErBP,EADAN,GAAoB,IA0Ed,kBAIF,uBACA,wBACEY,UAAU,2BACVC,QAtDkB,WACR,IAAZb,GAA6B,IAAZD,IACH,IAAZC,GAA6B,IAAZD,GACnBA,EAAU,GACVQ,IACAG,YAAW,WAETJ,EADAN,GAAoB,KAEnB,MAEHO,MA0CA,mBAMA,wBAAQK,UAAU,2BAA2BC,QAvC1B,WACvBF,cAAcb,IAsCV,kBAGA,wBAAQc,UAAU,sBAAsBC,QAtCpB,WACxBF,cAAcb,GAEdE,EAAU,EACVI,EAFAL,EAAU,GAGVO,EAAkBN,IAiCd,yBCtFOc,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.404d961d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.scss\";\n\nlet seconds = 0;\nlet minutes = 0;\nlet myInterval: number;\n\nfunction App() {\n  const [dynamicSeconds, setDynamicSeconds] = useState(0);\n  const [dynamicMinutes, setDynamicMinutes] = useState(0);\n\n  const addTimeHandler = () => {\n    minutes = minutes + 5;\n    setDynamicMinutes(minutes);\n  };\n\n  const subsctractTimeHandler = () => {\n    if (minutes !== 0) {\n      minutes = minutes - 5;\n      setDynamicMinutes(minutes);\n    }\n  };\n\n  const intervalHandler = () => {\n    myInterval = window.setInterval(() => {\n      seconds = seconds - 1;\n      setDynamicSeconds(seconds);\n      if (seconds === 0 && minutes !== 0) {\n        seconds = 60;\n        setTimeout(() => {\n          if (minutes !== 0) {\n            minutes = minutes - 1;\n          }\n          setDynamicMinutes(minutes);\n        }, 1000);\n      }\n    }, 1000);\n  };\n\n  const startTimerHandler = () => {\n    if (minutes !== 0 || seconds !== 0) {\n      if (minutes !== 0 && seconds === 0) {\n        seconds = 60;\n        intervalHandler();\n        setTimeout(() => {\n          minutes = minutes - 1;\n          setDynamicMinutes(minutes);\n        }, 1000);\n      } else {\n        intervalHandler();\n      }\n    }\n  };\n\n  if (seconds === 0 && minutes === 0) {\n    clearInterval(myInterval);\n  }\n\n  const stopTimerHandler = () => {\n    clearInterval(myInterval);\n  };\n\n  const resetTimerHandler = () => {\n    clearInterval(myInterval);\n    seconds = 0;\n    minutes = 0;\n    setDynamicSeconds(seconds);\n    setDynamicMinutes(minutes);\n  };\n\n  return (\n    <div className=\"app\">\n      {/* <div>\n        <Countdown seconds={} minutes={} />\n      </div> */}\n      <div className=\"flex flex-col\">\n        <div className=\"text-center flex items-center\">\n          <button\n            className=\"btn btn-blue ml-auto\"\n            onClick={subsctractTimeHandler}\n          >\n            -\n          </button>\n          <p className=\"m-5\">\n            Timer: {dynamicMinutes} : {dynamicSeconds}\n          </p>\n          <button className=\"btn btn-blue mr-auto\" onClick={addTimeHandler}>\n            +\n          </button>\n        </div>\n        <br />\n        <button\n          className=\"btn btn-blue m-auto mb-2\"\n          onClick={startTimerHandler}\n        >\n          Start\n        </button>\n        <button className=\"btn btn-blue m-auto mb-2\" onClick={stopTimerHandler}>\n          Stop\n        </button>\n        <button className=\"btn btn-blue m-auto\" onClick={resetTimerHandler}>\n          Reset\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./tailwind.output.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}