{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["myInterval","seconds","App","useState","dynamicSeconds","setTimer","className","onClick","window","setInterval","clearInterval","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0JAIIA,E,sDADAC,G,MAAU,GAgECC,MA7Df,WAAgB,IAAD,EACsBC,mBAAS,GAD/B,mBACNC,EADM,KACUC,EADV,KAkCb,OACE,qBAAKC,UAAU,MAAf,SACE,sBAAKA,UAAU,gBAAf,UACE,sBAAKA,UAAU,gCAAf,UACE,wBAAQA,UAAU,uBAAuBC,QA9B1B,WACE,IAAnBH,GAEFC,EADAJ,GAAoB,IA4BhB,eAGA,oBAAGK,UAAU,MAAb,wBAA+BF,KAC/B,wBAAQE,UAAU,uBAAuBC,QAvCjC,WAEdF,EADAJ,GAAoB,IAsCd,kBAIF,uBACA,wBAAQK,UAAU,2BAA2BC,QAhChC,WACM,IAAnBH,IACFJ,EAAaQ,OAAOC,aAAY,WAE9BJ,EADAJ,GAAoB,KAEnB,OA2BD,mBAGA,wBAAQK,UAAU,2BAA2BC,QA1BjC,WAChBG,cAAcV,IAyBV,kBAGA,wBAAQM,UAAU,sBAAsBC,QAzB3B,WACjBG,cAAcV,GAEdK,EADAJ,EAAU,IAuBN,yBC7COU,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c2fd2b5e.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.scss\";\n\nlet seconds = 0;\nlet myInterval: number;\n\nfunction App() {\n  const [dynamicSeconds, setTimer] = useState(0);\n\n  const addTime = () => {\n    seconds = seconds + 5;\n    setTimer(seconds);\n  };\n\n  const subsctractTime = () => {\n    if (dynamicSeconds !== 0) {\n      seconds = seconds - 5;\n      setTimer(seconds);\n    }\n  };\n\n  const startTimer = () => {\n    if (dynamicSeconds !== 0) {\n      myInterval = window.setInterval(() => {\n        seconds = seconds - 1;\n        setTimer(seconds);\n      }, 1000);\n    }\n  };\n\n  const stopTimer = () => {\n    clearInterval(myInterval);\n  };\n\n  const resetTimer = () => {\n    clearInterval(myInterval);\n    seconds = 0;\n    setTimer(seconds);\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"flex flex-col\">\n        <div className=\"text-center flex items-center\">\n          <button className=\"btn btn-blue ml-auto\" onClick={subsctractTime}>\n            -\n          </button>\n          <p className=\"m-5\">Timer: 0 : {dynamicSeconds}</p>\n          <button className=\"btn btn-blue mr-auto\" onClick={addTime}>\n            +\n          </button>\n        </div>\n        <br />\n        <button className=\"btn btn-blue m-auto mb-2\" onClick={startTimer}>\n          Start\n        </button>\n        <button className=\"btn btn-blue m-auto mb-2\" onClick={stopTimer}>\n          Stop\n        </button>\n        <button className=\"btn btn-blue m-auto\" onClick={resetTimer}>\n          Reset\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./tailwind.output.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}